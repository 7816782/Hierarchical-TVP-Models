Bhs = function(X,y,lamsq0,nu0,tausq0,xi0,sigmasq0,burnin,N){
  y = y - mean(y)
  p = ncol(X)
  n = nrow(X)
  X = scale(X)
  beta.sample = matrix(NA,p,N)
  lamsq.sample = matrix(NA,p,N)
  nu.sample = matrix(NA,p,N)
  tausq.sample = numeric(N)
  xi.sample = numeric(N)
  sigmasq.sample = numeric(N)
  for (i in 1:N){
    #sample beta
    D.lambda = diag(lamsq0) 
    H = t(X) %*% X + solve(D.lambda)
    Sigma = sigmasq0*solve(H) + 0.0001*diag(ncol(H))
    R = chol(Sigma)
    beta0 = solve(H) %*% t(X) %*% y + t(R) %*% rnorm(p)
    beta.sample[,i] = beta0
    # sample lam^2
    for (j in 1:p){
      lamsq0[j] = 1/rgamma(1,1,beta0[j]^2/(2*sigmasq0)+1/nu0[j])
    }
    lamsq.sample[,i] = lamsq0
    # sample nu
    for(j in 1:p){
      nu0[j] = 1/rgamma(1,1,1/lamsq0[j]+1/tausq0)
    }
    nu.sample[,i] = nu0
    # sample tau^2
    tausq0 = 1/rgamma(1,(p+1)/2,sum(1/nu0)+1/xi0)
    tausq.sample[i] = tausq0
    #sample xi
    xi0 = 1/rgamma(1,1,1+1/tausq0)
    xi.sample[i]=xi0
    # sample sigma^2
    sigmasq0 = 1/rgamma(1,(n+p-1)/2,(sum((y - X %*% beta0)^2)+t(beta0) %*% 
                                       solve(D.lambda) %*% beta0)/2)
    sigmasq.sample[i] = sigmasq0
  }
  MCMCsampler = list(beta = beta.sample[,(burnin+1):N],lamsq = lamsq.sample[,(burnin+1):N],
                     tausq = tausq.sample[burnin+1:N],sigmasq = sigmasq.sample[burnin+1:N])
  return(MCMCsampler)
}
